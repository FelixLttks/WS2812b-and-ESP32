#include <Adafruit_NeoPixel.h>

#define PIN 15
#define LED_COUNT 300

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(LED_COUNT, PIN, NEO_GRB + NEO_KHZ800);

int hue [LED_COUNT];   //all hue        in an array  
int sat [LED_COUNT];   //all saturation in an array 
int bri [LED_COUNT];   //all brightness in an array 
int sta [LED_COUNT];   //all static     in an array

void setup() {
  Serial.begin(115200);
  pixels.begin();

  for ( int i = 0 ; i < LED_COUNT ; i++) {
    hue[i] = 0;
    sat[i] = 0;
    bri[i] = 0;
    sta[i] = 1;
  }
  
}



void loop() {
  /*
  animation (    0,   0,false,false,255,255,    0,255,  0,  1,  1,  1, 10,300);
  animation (20000,   0,false,false,255,255,    0,255,  0,  1,  1,  1, 10,300);
  animation (40000,   0,false,false,255,255,    0,255,  0,  1,  1,  1, 10,100);
  animation (    0,   0,false,false,255,255,    0,255,  0,  5,  1,  1, 10, 20);
  animation (20000,   0,false,false,255,255,    0,255,  0,  5,  1,  1,  0, 20);
  animation (40000,   0,false,false,255,255,    0,255,  0,  5,  1,  2,  0, 20);
  animation (    0,   0,false,false,255,255,20000,255,255,  5,  1,  1,  5, 20);
  animation (    0,   0,false,false,255,255,20000,255, 50,  5,  1,  1,  5, 20);
  animation (    0,   0,false,false,255,  0,    0,255,  0,  1,  1,  1,  5,300);
  animation (20000,   0,false,false,255, 50,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,   0,false,false,  0,255,20000,255, 50,  3,  1,  1,  5,100);
  animation (    0,   0,false,false,255,  0,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,1000,false,false,255,255,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,   0,false,false,255,255,    0,255,  0,  1,300,  1,  0,  1);
  animation (    0,1000, true,false,255,255,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,   0,false,false,255,  0,    0,255,  0,  1,  1,  1,  5,300);
  animation (40000,   0,false,false,255,255,    0,255,  0,  1, 10, 10,100, 30);
  */
  
  animation (    0,1000,false,false,255,255,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,   0,false,false,255,  0,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,1000, true,false,255,255,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,   0,false,false,255,  0,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,1000, true,false,255,255,    0,255,  0,  1,  1,  1,  5,300);
  animation (    0,   0,false, true,255,  0,    0,255,  0,  1,  1,  1,  5,300);

  
}


















/*
   function : animation()

              animation (
                         hue_start ,               : the start hue
                         hue_change ,              :
                         hue_static ,              :
                         hue_static_delete ,       :
                         saturation_start ,        :
                         brightness_start ,        :
                         hue_background ,          :
                         saturation_background ,   :
                         brightness_background ,   :
                         density ,                 :
                         lenght ,                  :
                         speed ,                   :
                         delay_time ,              :
                         runs ,                    :
                        )
*/



void animation ( int hue_start , int hue_change , boolean hue_static , boolean hue_static_delete , int saturation_start , int brightness_start , int hue_background , int saturation_background , int brightness_background , int density , int lenght , int speed , int delay_time , int runs ) {
  int hue_currentStart = hue_start;

  if ( hue_static_delete ) {
    for ( int pixel_index = 0 ; pixel_index < LED_COUNT ; pixel_index ++) {
      sta[pixel_index] = 0; 
    }
  }

  for ( int runs_index = 0 ; runs_index < runs ; runs_index ++) {

    for ( int pixel_index = 0 ; pixel_index < lenght ; pixel_index ++) {
      hue[pixel_index] = hue_currentStart;
      sat[pixel_index] = saturation_start;
      bri[pixel_index] = brightness_start;
    }

    for ( int density_index = 0 ; density_index < density ; density_index ++) {

      for ( int pixel_index = 0 ; pixel_index < LED_COUNT ; pixel_index ++) {
        pixels.setPixelColor ( pixel_index , pixels.gamma32 ( pixels.ColorHSV ( hue[pixel_index] , sat[pixel_index] , bri[pixel_index])));
      }

      pixels.show();

      for ( int pixel_index = LED_COUNT - 1 ; pixel_index > 0 ; pixel_index --) {

        hue[pixel_index] = hue [pixel_index - speed] + sta[pixel_index] * speed;
        sat[pixel_index] = sat [pixel_index - speed];
        bri[pixel_index] = bri [pixel_index - speed];
        sta[pixel_index] = sta [pixel_index - speed];
      }

      for ( int background_index = 0 ; background_index < speed ; background_index ++) {
        hue[background_index] =        hue_background;
        sat[background_index] = saturation_background;
        bri[background_index] = brightness_background;

        if ( hue_static ) {
          sta[background_index] = hue_change;
        }
        else {
          sta[background_index] = 0;
        }

      }

      delay ( delay_time );
    }

    if ( !hue_static ) {
      hue_currentStart += hue_change;
    }

  }

}
